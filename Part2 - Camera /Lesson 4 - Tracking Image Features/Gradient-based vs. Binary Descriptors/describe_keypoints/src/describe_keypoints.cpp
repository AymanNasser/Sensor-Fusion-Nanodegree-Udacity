#include <iostream>
#include <numeric>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/features2d.hpp>

#include <opencv2/xfeatures2d.hpp>
#include <opencv2/xfeatures2d/nonfree.hpp>

using namespace std;

void descKeypoints1()
{
    // load image from file and convert to grayscale
    cv::Mat imgGray;
    cv::Mat img = cv::imread("../images/img1.png");
    cv::cvtColor(img, imgGray, cv::COLOR_BGR2GRAY);

    // Descriptors provide you with distinctive information on the surrounding area of a keypoint.
    // A descriptor is a vector of values, which describes the image patch around a keypoint 

    // BRISK detector / descriptor
    cv::Ptr<cv::FeatureDetector> detector = cv::BRISK::create();
    vector<cv::KeyPoint> kptsBRISK;

    double t = (double)cv::getTickCount();
    detector->detect(imgGray, kptsBRISK);
    t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
    cout << "BRISK detector with n= " << kptsBRISK.size() << " keypoints in " << 1000 * t / 1.0 << " ms" << endl;

    cv::Ptr<cv::DescriptorExtractor> descriptor = cv::BRISK::create();
    cv::Mat descBRISK;
    t = (double)cv::getTickCount();
    descriptor->compute(imgGray, kptsBRISK, descBRISK);
    t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
    cout << "BRISK descriptor in " << 1000 * t / 1.0 << " ms" << endl;

    // visualize results
    cv::Mat visImage = img.clone();
    cv::drawKeypoints(img, kptsBRISK, visImage, cv::Scalar::all(-1), cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS);
    string windowName = "BRISK Results";
    cv::namedWindow(windowName, 1);
    imshow(windowName, visImage);
    cv::waitKey(0);

    // SIFT detector
    int nFeatures = 0; // The number of best features to retain. The features are ranked by their scores
    int nOctaveLayers = 3; // In SIFT, an octave is the set of images generated by progressively blurring out an image

    // The contrast threshold used to filter out weak features in semi-uniform (low-contrast) regions. 
    // The larger the threshold, the less features are produced by the detector.
    double contrastThreshold = 0.04;

    // The threshold used to filter out edge-like features. Note that the its meaning is different from the contrastThreshold, i.e. 
    // the larger the edgeThreshold, the less features are filtered out (more features are retained).
    double edgeThreshold = 10;

    // The sigma of the Gaussian applied to the input image at the octave
    double sigma = 1.6;
    std::vector<cv::KeyPoint> SIFT_KeyPoints;
    cv::Mat SIFT_Disc;

    cv::Ptr<cv::FeatureDetector> SIFT_Detector = cv::SIFT::create(nFeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma);
    cv::Ptr<cv::DescriptorExtractor> SIFT_Describtor = cv::SIFT::create(nFeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma);

    // Detecting keypoints
    t = (double)cv::getTickCount();
    SIFT_Detector->detect(imgGray, SIFT_KeyPoints);
    t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
    cout << "SIFT detector with n= " << SIFT_KeyPoints.size() << " keypoints in " << 1000 * t / 1.0 << " ms" << endl;

    // Computing describtors
    t = (double)cv::getTickCount();
    SIFT_Describtor->compute(imgGray, SIFT_KeyPoints, SIFT_Disc);
    t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
    cout << "SIFT describtor in n= "  << 1000 * t / 1.0 << " ms" << endl;

    // visualize results
    visImage = img.clone();
    cv::drawKeypoints(img, SIFT_KeyPoints, visImage, cv::Scalar::all(-1), cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS);
    string windowName_2 = "SIFT Results";
    cv::namedWindow(windowName_2, 1);
    imshow(windowName_2, visImage);
    cv::waitKey(0);

    
}

int main()
{
    descKeypoints1();
    return 0;
}